namespace NumbatLogic
{
	// kinda wrong since it's identifier[] not expression[]
	// should be somehow part of left/right expression without an operator...
	class ArrayLookup : AST
	{
		public AST m_pExpression;
		public Vector<AST>* m_pIndexExpressionVector;

		public construct()
		{
			m_eType = AST::Type::AST_ARRAY_LOOKUP;
			m_pIndexExpressionVector = own new Vector<AST>();
		}

		public static ArrayLookup** TryCreate(TokenContainer pTokenContainer, OffsetDatum pOffsetDatum)
		{
			OffsetDatum* pTempOffset = own OffsetDatum::Create(pOffsetDatum);

			// infinite loop? AST pExpression = AST::TryCreateExpression(pTokenContainer, pTempOffset);
			AST* pExpression = own Identifier::TryCreate(pTokenContainer, pTempOffset);
			if (pExpression == null)
				return null;

			if (pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_SQUARE_BRACKET_LEFT) == null)
				return null;

			ArrayLookup* pArrayLookup = own new ArrayLookup();
			pArrayLookup.m_pFirstToken = pExpression.m_pFirstToken;
			pArrayLookup.m_pExpression = pExpression;
			pArrayLookup.AddChild(disown pExpression);
			
			while (pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_SQUARE_BRACKET_LEFT) != null)
			{
				pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

				AST* pIndexExpression = own AST::TryCreateExpression(pTokenContainer, pTempOffset);
				if (pIndexExpression == null)
				{
					Console::Log("expected index expression");
					Console::Log(pTokenContainer.StringifyOffset(pTempOffset));
					NumbatLogic::Assert::Plz(false);
					return null;
				}

				if (pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_SQUARE_BRACKET_RIGHT) == null)
				{
					Console::Log("expected right bracket");
					Console::Log(pTokenContainer.StringifyOffset(pTempOffset));
					NumbatLogic::Assert::Plz(false);
					return null;
				}
				pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

				pArrayLookup.m_pIndexExpressionVector.PushBack(pIndexExpression);
				pArrayLookup.AddChild(disown pIndexExpression);
			}
			
			pOffsetDatum.Set(pTempOffset);
			return disown pArrayLookup;
		}

		public override AST** BaseClone()
		{
			ArrayLookup* pArrayLookup = own new ArrayLookup();

			AST* pExpression = own m_pExpression.BaseClone();
			pArrayLookup.m_pExpression = pExpression;
			pArrayLookup.AddChild(disown pExpression);

			for (int i = 0; i < m_pIndexExpressionVector.GetSize(); i++)
			{
				AST* pIndexExpression = own m_pIndexExpressionVector.Get(i).BaseClone();
				pArrayLookup.m_pIndexExpressionVector.PushBack(pIndexExpression);
				pArrayLookup.AddChild(disown pIndexExpression);
			}

			// clone logic here
			return disown pArrayLookup;
		}

		public override void Validate(Validator pValidator, OperatorExpr pParent)
		{
			base.Validate(pValidator, pParent);
			if (m_pExpression.m_pValueType == null)
			{
				pValidator.AddError("Unknown ValueType of m_pExpression", m_pFirstToken.m_sFileName, m_pFirstToken.m_nLine, m_pFirstToken.m_nColumn);
				return;
			}
			m_pValueType = own m_pExpression.m_pValueType.Clone();
		}

		public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
		{
			m_pExpression.Stringify(eLanguage, eOutputFile, 0, sOut);
			for (int i = 0; i < m_pIndexExpressionVector.GetSize(); i++)
			{
				sOut.AppendChar('[');
				m_pIndexExpressionVector.Get(i).Stringify(eLanguage, eOutputFile, 0, sOut);
				sOut.AppendChar(']');
			}
		}
	}
}