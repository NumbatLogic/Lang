namespace NumbatLogic
{
	class BreakStmt : AST
	{
		public construct()
		{
			m_bStatement = true;
		}

		public static BreakStmt** TryCreate(TokenContainer pTokenContainer, OffsetDatum pOffsetDatum)
		{
			OffsetDatum* pTempOffset = own OffsetDatum::Create(pOffsetDatum);
			
			Token pBreakToken = pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_KEYWORD_BREAK);
			if (pBreakToken == null)
				return null;
			pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

			if (pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_SEMICOLON) == null)
			{
				Console::Log("expected semicolon");
				NumbatLogic::Assert::Plz(false);
				return null;
			}
			pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

			BreakStmt* pBreakStmt = own new BreakStmt();

			pBreakStmt.m_eType = AST::Type::AST_BREAK_STMT;
			pBreakStmt.m_pFirstToken = pBreakToken;
			
			pOffsetDatum.Set(pTempOffset);
			return disown pBreakStmt;
		}

		public override void Validate(Validator pValidator, OperatorExpr pParent)
		{
			base.Validate(pValidator, pParent);
			pValidator.InjectCleanup(this);
		}

		public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
		{
			Util::Pad(nDepth, sOut);
			sOut.Append("break;\n");
		}
	}
}