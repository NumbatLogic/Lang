namespace NumbatLogic
{
	class Identifier : AST
	{
		//public Token* m_pOwnedNameToken;

		public static Identifier** TryCreate(TokenContainer pTokenContainer, OffsetDatum pOffsetDatum)
		{
			OffsetDatum* pTempOffset = own OffsetDatum::Create(pOffsetDatum);

			Token pToken = pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_IDENTIFIER);
			if (pToken == null)
				return null;
			pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;
			
			Identifier* pIdentifier = own new Identifier();
			pIdentifier.m_eType = AST::Type::AST_IDENTIFIER;
			pIdentifier.m_pFirstToken = pToken;
			
			pOffsetDatum.Set(pTempOffset);

			return disown pIdentifier;
		}

		public override AST** BaseClone()
		{
			Identifier* pIdentifier = own new Identifier();
			pIdentifier.m_eType = m_eType;
			pIdentifier.m_pFirstToken = m_pFirstToken;
			return disown pIdentifier;
		}

		public override void Validate(Validator pValidator, OperatorExpr pParent)
		{
			string sName = m_pFirstToken.GetString();

			AST pAST = null;
			AST pBase = this;
			AST pChild = this;
			if (pParent != null)
			{
				if (pParent.m_pOperatorToken.m_eType == Token::Type::TOKEN_DOT && pParent.m_pLeft.m_pValueType.m_eType == ValueType::Type::CLASS_DECL_VALUE)
				{
					AddClassDeclReference(pParent.m_pLeft.m_pValueType.m_pClassDecl, AST::OutputFile::SOURCE, false);
					pBase = pParent.m_pLeft.m_pValueType.m_pClassDecl;
					pChild = null;
				}
				else if (pParent.m_pOperatorToken.m_eType == Token::Type::TOKEN_DOUBLE_COLON)
				{
					if (pParent.m_pLeft.m_pValueType.m_eType == ValueType::Type::CLASS_DECL)
					{
						AddClassDeclReference(pParent.m_pLeft.m_pValueType.m_pClassDecl, AST::OutputFile::SOURCE, false);
						pBase = pParent.m_pLeft.m_pValueType.m_pClassDecl;
						pChild = null;
					}
					else if (pParent.m_pLeft.m_pValueType.m_eType == ValueType::Type::ENUM_DECL)
					{
						pBase = pParent.m_pLeft.m_pValueType.m_pEnumDecl;
						pChild = null;
					}
					else if (pParent.m_pLeft.m_pValueType.m_eType == ValueType::Type::NAMESPACE_NODE)
					{
						Vector<NamespaceDecl> pNamespaceDeclVector = pParent.m_pLeft.m_pValueType.m_pNamespaceNode.m_pNamespaceDeclVector;
						for (int i = 0; i < pNamespaceDeclVector.GetSize(); i++)
						{
							NamespaceDecl pNamespaceDecl = pNamespaceDeclVector.Get(i);
							pAST = pNamespaceDecl.FindByName(sName, null);

							if (pAST != null)
								break;
						}
					}
					else
					{
						pValidator.AddError("Unexpected left of ::", m_pFirstToken.m_sFileName, m_pFirstToken.m_nLine, m_pFirstToken.m_nColumn);
						return;
					}
				}
			}
			
			if (pAST == null)
				pAST = pBase.FindByName(sName, pChild);

			if (pAST == null)
			{
				InternalString* sTemp = own new InternalString("Identifier Unbeknownst! ");
				sTemp.Append(sName);
				if (pParent != null)
					sTemp.Append(" has parent");
				sTemp.Append(" base: ");
				pBase.StringifyType(sTemp);
				pValidator.AddError(sTemp.GetExternalString(), m_pFirstToken.m_sFileName, m_pFirstToken.m_nLine, m_pFirstToken.m_nColumn);
				return;
			}

			if (pAST.m_eType == AST::Type::AST_CLASS_DECL)
			{
				m_pValueType = own new ValueType(ValueType::Type::CLASS_DECL);
				m_pValueType.m_pClassDecl = cast ClassDecl(pAST);

				// could be smarter and work out if we are just using pointer or dereferencing
				AddClassDeclReference(m_pValueType.m_pClassDecl, AST::OutputFile::SOURCE, false);


				AST pCheckParent = m_pParent;
				AST pCurrent = this;
				for (int i = 0; i < 5; i++)
				{
					if (pCheckParent == null)
						break;
					if (pCheckParent.m_eType == AST::Type::AST_VAR_DECL)
					{
						VarDecl pVarDecl = cast VarDecl(pCheckParent);

						// if we are inside a member var array size
						if (pCurrent == pVarDecl.m_pArraySize && pVarDecl.m_pParent != null && pVarDecl.m_pParent.m_eType == AST::Type::AST_MEMBER_VAR_DECL)
							AddClassDeclReference(m_pValueType.m_pClassDecl, AST::OutputFile::HEADER, false);

						// if we are being assigned to a static const member var
						if (pCurrent == pVarDecl.m_pAssignment && pVarDecl.m_pParent != null && pVarDecl.m_pParent.m_eType == AST::Type::AST_MEMBER_VAR_DECL)
						{
							MemberVarDecl pMemberVarDecl = cast MemberVarDecl(pVarDecl.m_pParent);
							if (pMemberVarDecl.m_bStatic)
								AddClassDeclReference(m_pValueType.m_pClassDecl, AST::OutputFile::HEADER, false);
						}

						break;
					}

					pCurrent = pCheckParent;
					pCheckParent = pCheckParent.m_pParent;
				}

				return;
			}

			if (pAST.m_eType == AST::Type::AST_ENUM_DECL)
			{
				m_pValueType = own new ValueType(ValueType::Type::ENUM_DECL);
				m_pValueType.m_pEnumDecl = cast EnumDecl(pAST);
				return;
			}

			if (pAST.m_eType == AST::Type::ENUM_DECL_VALUE)
			{
				m_pValueType = own new ValueType(ValueType::Type::ENUM_DECL_VALUE);
				m_pValueType.m_pEnumDeclValue = cast EnumDeclValue(pAST);
				return;
			}

			if (pAST.m_eType == AST::Type::AST_VAR_DECL)
			{
				VarDecl pVarDecl = cast VarDecl(pAST);
				m_pValueType = own pVarDecl.m_pTypeRef.CreateValueType();

				if (m_pValueType == null)
				{
					pValidator.AddError("Could not create ValueType for VarDecl", m_pFirstToken.m_sFileName, m_pFirstToken.m_nLine, m_pFirstToken.m_nColumn);
					return;
				}

				// a bit hax generic typing back to the instantiaiton
				if (m_pValueType.m_eType == ValueType::Type::GENERIC_TYPE_DECL_VALUE)
				{
					if (pParent != null)
					{
						if (pParent.m_pOperatorToken.m_eType == Token::Type::TOKEN_DOT && pParent.m_pLeft.m_pValueType.m_eType == ValueType::Type::CLASS_DECL_VALUE)
						{
							/*Console::Log("!!!!");
							Console::Log(m_pValueType.m_pGenericTypeDecl.m_pFirstToken.m_sValue.GetExternalString());
							Console::Log(m_pFirstToken.m_sFileName.GetExternalString());
							InternalString* sTemp = own new InternalString("");
							sTemp.AppendInt(m_pFirstToken.m_nLine);
							sTemp.Append(":");
							sTemp.AppendInt(m_pFirstToken.m_nColumn);
							Console::Log(sTemp.GetExternalString());*/

							if (pParent.m_pLeft.m_pValueType.m_pGenericValueTypeVector != null)
							{
								if (pParent.m_pLeft.m_pValueType.m_pGenericValueTypeVector.GetSize() > 0)
								{
									ValueType pGenericValueType = pParent.m_pLeft.m_pValueType.m_pGenericValueTypeVector.Get(0);
									if (pGenericValueType.m_eType == ValueType::Type::CLASS_DECL_VALUE)
									{
										//Console::Log(pGenericValueType.m_pClassDecl.m_pNameToken.m_sValue.GetExternalString());

										ValueType* pOldValueType;
										pOldValueType = own disown m_pValueType;
										m_pValueType = own pGenericValueType.Clone();
										m_pValueType.m_ePointerType = pOldValueType.m_ePointerType;
									}
								}
							}
						}
					}
				}
				

				return;
			}

			if (pAST.m_eType == AST::Type::AST_FUNCTION_DECL)
			{
				m_pValueType = own new ValueType(ValueType::Type::FUNCTION_DECL);
				m_pValueType.m_pFunctionDecl = cast FunctionDecl(pAST);
				return;
			}

			if (pAST.m_eType == AST::Type::NAMESPACE_DECL)
			{
				m_pValueType = own new ValueType(ValueType::Type::NAMESPACE_NODE);
				m_pValueType.m_pNamespaceNode = (cast NamespaceDecl(pAST)).m_pNamespaceNode;
				return;
			}

			{
				InternalString* sTemp = own new InternalString("say what? ");
				pAST.StringifyType(sTemp);
				pValidator.AddError(sTemp.GetExternalString(), m_pFirstToken.m_sFileName, m_pFirstToken.m_nLine, m_pFirstToken.m_nColumn);
			}

			base.Validate(pValidator, pParent);
		}

		public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
		{
			m_pFirstToken.Stringify(sOut);
		}
	}
}