namespace NumbatLogic
{
	class MemberVarsSetDefaultStmt : AST
	{
		public construct()
		{
			m_eType = AST::Type::MEMBER_VARS_SET_DEFAULT_STMT;
			m_bStatement = true;
		}
		
		public override void Validate(Validator pValidator, OperatorExpr pParent)
		{
			base.Validate(pValidator, pParent);
			// make sure we are first child of a constructor

			if (m_pParent.m_eType == AST::Type::AST_SCOPE)
			{
				if (m_pParent.m_pParent.m_eType == AST::Type::AST_TOR_DECL)
				{
					TorDecl pTorDecl = cast TorDecl(m_pParent.m_pParent);
					if (pTorDecl.m_pTypeToken.m_eType == Token::Type::TOKEN_KEYWORD_CONSTRUCT)
					{
						if (m_pParent.m_pFirstChild != this)
						{
							pValidator.AddError("MemberVarsSetDefaultStmt should be first child of constructor", null, 0, 0);
							return;
						}

						// tor should validate this itself....
						if (pTorDecl.m_pParent.m_eType != AST::Type::AST_CLASS_DECL)
						{
							pValidator.AddError("MemberVarsSetDefaultStmt parent constructor is not child of a class decl???", null, 0, 0);
							return;
						}

						return;
					}
				}
			}

			pValidator.AddError("Expected parent to be constructor", null, 0, 0);
		}

		public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
		{
			if (eLanguage == AST::Language::CPP)
			{
				AST pChild = m_pParent.m_pParent.m_pParent.m_pFirstChild;
				while (pChild != null)
				{
					if (pChild.m_eType == AST::Type::AST_MEMBER_VAR_DECL)
					{
						MemberVarDecl pMemberVarDecl = cast MemberVarDecl(pChild);

						if (!pMemberVarDecl.m_bStatic)
						{
							ValueType pValueType = pMemberVarDecl.m_pVarDecl.m_pTypeRef.GetRecursiveValueType();
							
							if (!pMemberVarDecl.m_pVarDecl.m_pTypeRef.m_bConst)
							{
								if (pMemberVarDecl.m_pVarDecl.m_pArraySizeVector != null)
								{
									int nArraySizeSize = pMemberVarDecl.m_pVarDecl.m_pArraySizeVector.GetSize();
									for (int i = 0; i < nArraySizeSize; i++)
									{
										AST pArraySize = pMemberVarDecl.m_pVarDecl.m_pArraySizeVector.Get(i);
										Util::Pad(nDepth + i, sOut);
										sOut.Append("for (int _x");
										sOut.AppendInt(i);
										sOut.Append(" = 0; _x");
										sOut.AppendInt(i);
										sOut.Append(" < ");
										pArraySize.Stringify(eLanguage, eOutputFile, 0, sOut);
										sOut.Append("; _x");
										sOut.AppendInt(i);
										sOut.Append("++)\n");
									}

									Util::Pad(nDepth + nArraySizeSize, sOut);
									sOut.AppendString(pMemberVarDecl.m_pVarDecl.m_pNameToken.GetString());

									for (int i = 0; i < nArraySizeSize; i++)
									{
										sOut.Append("[_x");
										sOut.AppendInt(i);
										sOut.Append("]");
									}
									sOut.Append(" = ");

									// COPY PASTA!
									switch (pValueType.m_eType)
									{
										case ValueType::Type::INT:
										{
											sOut.Append("0");
											break;
										}
										case ValueType::Type::BOOL:
										{
											sOut.Append("false");
											break;
										}
										case ValueType::Type::CHAR:
										case ValueType::Type::UNICHAR:
										{
											sOut.Append("'0'");
											break;
										}
										case ValueType::Type::CLASS_DECL_VALUE:
										case ValueType::Type::GENERIC_TYPE_DECL_VALUE:
										case ValueType::Type::DELEGATE_DECL_VALUE:
										case ValueType::Type::VOIDPTR:
										case ValueType::Type::STRING:
										{
											sOut.Append("0");
											break;
										}
										case ValueType::Type::ENUM_DECL_VALUE:
										{
											if (pValueType.m_pEnumDecl == null)
												sOut.Append("no_m_pEnumDecl");
											EnumDeclValue pEnumDeclValue = pValueType.m_pEnumDecl.m_pEnumDeclValueVector.Get(0);
											if (pValueType.m_pEnumDecl == null)
												sOut.Append("no_pEnumDeclValue");

											pMemberVarDecl.m_pVarDecl.m_pTypeRef.Stringify(eLanguage, eOutputFile, 0, sOut);
											sOut.Append("::");
											pEnumDeclValue.m_pFirstToken.Stringify(sOut);
											break;
										}
										default:
										{
											sOut.Append("???");
											pValueType.StringifyType(sOut);
											break;
										}
									}
									sOut.Append(";\n");
								
								}
								else
								{
									Util::Pad(nDepth, sOut);
									sOut.AppendString(pMemberVarDecl.m_pVarDecl.m_pNameToken.GetString());
									sOut.Append(" = ");
									switch (pValueType.m_eType)
									{
										case ValueType::Type::INT:
										{
											sOut.Append("0");
											break;
										}
										case ValueType::Type::BOOL:
										{
											sOut.Append("false");
											break;
										}
										case ValueType::Type::CHAR:
										case ValueType::Type::UNICHAR:
										{
											sOut.Append("'0'");
											break;
										}
										case ValueType::Type::CLASS_DECL_VALUE:
										case ValueType::Type::GENERIC_TYPE_DECL_VALUE:
										case ValueType::Type::DELEGATE_DECL_VALUE:
										case ValueType::Type::VOIDPTR:
										case ValueType::Type::STRING:
										{
											sOut.Append("0");
											break;
										}
										case ValueType::Type::ENUM_DECL_VALUE:
										{
											if (pValueType.m_pEnumDecl == null)
												sOut.Append("no_m_pEnumDecl");
											EnumDeclValue pEnumDeclValue = pValueType.m_pEnumDecl.m_pEnumDeclValueVector.Get(0);
											if (pValueType.m_pEnumDecl == null)
												sOut.Append("no_pEnumDeclValue");

											pMemberVarDecl.m_pVarDecl.m_pTypeRef.Stringify(eLanguage, eOutputFile, 0, sOut);
											sOut.Append("::");
											pEnumDeclValue.m_pFirstToken.Stringify(sOut);
											break;
										}
										default:
										{
											sOut.Append("???");
											pValueType.StringifyType(sOut);
											break;
										}
									}
									sOut.Append(";\n");
								}
							}
						}
					}
					pChild = pChild.m_pNextSibling;
				}
			}
		}
	}
}