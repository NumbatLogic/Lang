namespace NumberDuck
{
	namespace Secret
	{
		class Paren : AST
		{
			public static Paren** TryCreate(TokenContainer pTokenContainer, OffsetDatum pOffsetDatum)
			{
				OffsetDatum* pTempOffset = own OffsetDatum::Create(pOffsetDatum);

				Token pOpeningToken = pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_PARENTHESIS_LEFT);
				if (pOpeningToken == null)
					return null;
				pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

				AST* pChild = own AST::TryCreateExpression(pTokenContainer, pTempOffset);
				if (pChild == null)
					return null;

				Token pClosingToken = pTokenContainer.PeekExpect(pTempOffset, Token::Type::TOKEN_PARENTHESIS_RIGHT);
				if (pClosingToken == null)
					return null;
				pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

				Paren* pParen = own new Paren();
				pParen.m_eType = AST::Type::AST_PAREN;
				pParen.m_pFirstToken = pOpeningToken;
				
				pParen.AddChild(disown pChild);

				pOffsetDatum.Set(pTempOffset);
				return disown pParen;
			}

			public override void Validate(Validator pValidator, OperatorExpr pParent)
			{
				base.Validate(pValidator, pParent);
				if (m_pFirstChild.m_pValueType == null)
				{
					pValidator.AddError("No valuetype???", m_pFirstChild.m_pFirstToken.m_sFileName, m_pFirstChild.m_pFirstToken.m_nLine, m_pFirstChild.m_pFirstToken.m_nColumn);
					return;
				}
				m_pValueType = own m_pFirstChild.m_pValueType.Clone();
			}

			public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
			{
				sOut.AppendChar('(');
				m_pFirstChild.Stringify(eLanguage, eOutputFile, 0, sOut);
				sOut.AppendChar(')');
			}
		}
	}
}