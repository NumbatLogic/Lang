namespace NumberDuck
{
	namespace Secret
	{
		class Unary : AST
		{
			public AST m_pExpression;
			
			public static Unary** TryCreate(TokenContainer pTokenContainer, OffsetDatum pOffsetDatum)
			{
				OffsetDatum* pTempOffset = own OffsetDatum::Create(pOffsetDatum);

				Token pToken = pTokenContainer.Peek(pTempOffset);
				if (pToken == null || pToken.m_eType != Token::Type::TOKEN_MINUS && pToken.m_eType != Token::Type::TOKEN_BANG && pToken.m_eType != Token::Type::TOKEN_PLUS_PLUS && pToken.m_eType != Token::Type::TOKEN_MINUS_MINUS && pToken.m_eType != Token::Type::TOKEN_TILDE)
					return null;
				pTempOffset.m_nOffset = pTempOffset.m_nOffset+1;

				AST* pExpression = own AST::TryCreateExpression(pTokenContainer, pTempOffset);

				Unary* pUnary = own new Unary();

				pUnary.m_eType = AST::Type::AST_UNARY;
				pUnary.m_pFirstToken = pToken;
				pUnary.m_pExpression = pExpression;

				pUnary.AddChild(disown pExpression);

				pOffsetDatum.Set(pTempOffset);
				return disown pUnary;
			}

			public override void Validate(Validator pValidator, OperatorExpr pParent)
			{
				// todo: convert bang to bool?
				base.Validate(pValidator, pParent);

				if (m_pExpression.m_pValueType == null)
				{
					InternalString* sTemp = own new InternalString("expression did not validate?? ");
					m_pExpression.StringifyType(sTemp);
					pValidator.AddError(sTemp.GetExternalString(), m_pExpression.m_pFirstToken.m_sFileName, m_pExpression.m_pFirstToken.m_nLine, m_pExpression.m_pFirstToken.m_nColumn);
					return;
				}

				m_pValueType = own m_pExpression.m_pValueType.Clone();
			}


			public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
			{
				m_pFirstToken.Stringify(sOut);
				m_pExpression.Stringify(eLanguage, eOutputFile, 0, sOut);
			}
		}
	}
}