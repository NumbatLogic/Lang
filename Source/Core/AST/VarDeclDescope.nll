namespace NumbatLogic
{
	class VarDeclDescope : AST
	{
		public Vector<VarDecl>* m_pVarDeclVector;

		public construct()
		{
			m_eType = AST::Type::AST_VAR_DECL_DESCOPE;
			m_pVarDeclVector = own new Vector<VarDecl>();
		}

		public override void Stringify(Language eLanguage, OutputFile eOutputFile, int nDepth, InternalString sOut)
		{
			if (eLanguage == AST::Language::CPP)
			{
				for (int i = 0; i < m_pVarDeclVector.GetSize(); i++)
				{
					VarDecl pVarDecl = m_pVarDeclVector.Get(i);
					string sxName = pVarDecl.m_pNameToken.GetString();

					if (pVarDecl.m_pArraySizeVector != null)
					{
						int nArraySizeSize = pVarDecl.m_pArraySizeVector.GetSize();
						for (int i = 0; i < nArraySizeSize; i++)
						{
							AST pArraySize = pVarDecl.m_pArraySizeVector.Get(i);
							Util::Pad(nDepth + i, sOut);
							sOut.Append("for (int _x");
							sOut.AppendInt(i);
							sOut.Append(" = 0; _x");
							sOut.AppendInt(i);
							sOut.Append(" < ");
							pArraySize.Stringify(eLanguage, eOutputFile, 0, sOut);
							sOut.Append("; _x");
							sOut.AppendInt(i);
							sOut.Append("++)\n");
						}

						Util::Pad(nDepth + nArraySizeSize, sOut);
						sOut.Append("delete ");
						sOut.Append(sxName);
						for (int i = 0; i < nArraySizeSize; i++)
						{
							sOut.Append("[_x");
							sOut.AppendInt(i);
							sOut.Append("]");
						}
						sOut.Append(";\n");
					}
					else
					{
						Util::Pad(nDepth, sOut);
						sOut.Append("if (");
						sOut.Append(sxName);
						sOut.Append(") delete ");
						sOut.Append(sxName);
						sOut.Append(";\n");
					}
				}
			}
		}
	}
}