namespace NumbatLogic
{
	class Project : AST
	{
		public Vector<TranslationUnit>* m_pTranslationUnitVector; // can just use existing child stuff for this...
		public NamespaceNode* m_pRootNamespaceNode;

		public construct()
		{
			m_bCanDescend = true;
			m_pTranslationUnitVector = own new Vector<TranslationUnit>();
			m_pRootNamespaceNode = own new NamespaceNode(null, null);
		}

		public void AddFile(string sFile, OwnedVector<InternalString> sDefineVector)
		{
			for (int i = 0; i < m_pTranslationUnitVector.GetSize(); i++)
			{
				TranslationUnit pTestTranslationUnit = m_pTranslationUnitVector.Get(i);
				if (pTestTranslationUnit.m_sInFile.IsEqual(sFile))
				{
					//Console::Log("SKIP!!!!");
					//Console::Log(sFile);
					return;
				}
			}

			TranslationUnit* pTranslationUnit = own TranslationUnit::Create(sFile, sDefineVector);

			if (pTranslationUnit == null)
			{
				Console::Log("unable to parse file");
				Console::Log(sFile);
	   			NumbatLogic::Assert::Plz(false);
	   			return;
			}

			m_pTranslationUnitVector.PushBack(pTranslationUnit);
			AddChild(disown pTranslationUnit);
		}

		public void AddDirectory(string sDirectory, OwnedVector<InternalString> sDefineVector)
		{
			OwnedVector<InternalString>* sFileVector = own File::GetRecursiveFileVector(sDirectory);

			while (sFileVector.GetSize() > 0)
			{
				InternalString* sFile = own sFileVector.PopBack();
				AddFile(sFile.GetExternalString(), sDefineVector);
			}
		}

		public void FullValidate()
		{
			// move pure nll shared code output into transpiled folder
			for (int i = 0; i < m_pTranslationUnitVector.GetSize(); i++)
			{
				TranslationUnit pTranslationUnit = m_pTranslationUnitVector.Get(i);
				if (pTranslationUnit.m_sInFile.EndsWith(".nll"))
				{
					pTranslationUnit.m_sInFile.Replace("../LangShared", "Source/LangShared");
					if (pTranslationUnit.m_sInFile.StartsWith("Shared"))
						pTranslationUnit.m_sInFile.Replace("Shared", "Source/Shared");
					else
						pTranslationUnit.m_sInFile.Replace("/Shared", "/Source/Shared");
				}
			}

			//need to put namespace node in Project or keep validator alive for stringify...
			Validator* pValidator = own new Validator(this);
			if (!pValidator.Validate())
			{

			}
		}

		private void RecurseNamespaces(AST pInAst, NamespaceDecl pSecretNamespace, TranslationUnit pSecretTranslationUnit)
		{
			if (pInAst.m_eType == AST::Type::AST_TRANSLATION_UNIT)
			{
				NumbatLogic::Assert::Plz(pSecretNamespace == null);
			}

			AST pChild = pInAst.m_pFirstChild;
 			while (pChild != null)
			{
				if (pChild.m_eType == AST::Type::NAMESPACE_DECL)
				{
					NamespaceDecl pNamespaceDecl = cast NamespaceDecl(pChild);
					if (pNamespaceDecl.m_pNameToken.m_sValue.IsEqual("Secret"))
					{
						AST pNextChild = pChild;
						pNextChild = pChild.m_pNextSibling;

						AST* pOwnedChild;
						pOwnedChild = own pInAst.RemoveChild(pChild);

						NumbatLogic::Assert::Plz(pOwnedChild != null);

						if (pSecretNamespace == null)
						{
							pSecretTranslationUnit.AddChild(disown pOwnedChild);
						}
						else
						{
							pSecretNamespace.AddChild(disown pOwnedChild);
						}

						pChild = pNextChild;
						continue;
					}

					// else nest down
					NamespaceDecl* pNextSecretNamespace = own new NamespaceDecl();
					pNextSecretNamespace.m_pFirstToken = pNamespaceDecl.m_pFirstToken;
					pNextSecretNamespace.m_pNameToken = pNamespaceDecl.m_pNameToken;
					pNextSecretNamespace.m_bSkipOutput = pNamespaceDecl.m_bSkipOutput;

					NamespaceDecl pTemp = pNextSecretNamespace;
					if (pSecretNamespace == null)
					{
						pSecretTranslationUnit.AddChild(disown pNextSecretNamespace);
					}
					else
					{
						pSecretNamespace.AddChild(disown pNextSecretNamespace);
					}
					
					RecurseNamespaces(pNamespaceDecl, pTemp, pSecretTranslationUnit);
				}

				pChild = pChild.m_pNextSibling;
			}
		}

		private void NamespaceMerge(AST pParentAST)
		{
			AST pChild = pParentAST.m_pFirstChild;
			Vector<NamespaceDecl>* pPreviousNamespaceDecls = own new Vector<NamespaceDecl>();

 			while (pChild != null)
			{
				if (pChild.m_eType == AST::Type::NAMESPACE_DECL)
				{
					NamespaceDecl pNamespaceDecl = cast NamespaceDecl(pChild);
					string sxName = pNamespaceDecl.m_pNameToken.m_sValue.GetExternalString();
					int i;
					for (i = 0; i < pPreviousNamespaceDecls.GetSize(); i++)
					{
						NamespaceDecl pPreviousNamespace = pPreviousNamespaceDecls.Get(i);
						if (pPreviousNamespace.m_pNameToken.m_sValue.IsEqual(sxName) && pPreviousNamespace.m_bSkipOutput == pNamespaceDecl.m_bSkipOutput)
						{
							AST pNextSibling = pChild.m_pNextSibling;
							AST* pOwnedChild;
							pOwnedChild = own pParentAST.RemoveChild(pChild);

							AST* pSubChild;
							pSubChild = own disown pOwnedChild.m_pFirstChild;
							pOwnedChild.m_pLastChild = null;

							if (pSubChild != null)
							{
								pSubChild.m_pParent = pPreviousNamespace;
								if (pPreviousNamespace.m_pFirstChild == null)
								{
									pPreviousNamespace.m_pFirstChild = own disown pSubChild;
									pPreviousNamespace.m_pLastChild = pPreviousNamespace.m_pFirstChild;
								}
								else
								{
									pPreviousNamespace.m_pLastChild.m_pNextSibling = own disown pSubChild;
									pPreviousNamespace.m_pLastChild.m_pNextSibling.m_pPrevSibling = pPreviousNamespace.m_pLastChild;
								}

								while (pPreviousNamespace.m_pLastChild.m_pNextSibling != null)
								{
									pPreviousNamespace.m_pLastChild = pPreviousNamespace.m_pLastChild.m_pNextSibling;
									pPreviousNamespace.m_pLastChild.m_pParent = pPreviousNamespace;
								}
							}

							pChild = pNextSibling;
							break;
						}
					}

					if (i == pPreviousNamespaceDecls.GetSize())
					{
						pPreviousNamespaceDecls.PushBack(pNamespaceDecl);
					}
					else
					{
						continue;
					}
				}

				pChild = pChild.m_pNextSibling;
			}

			{
				for (int i = 0; i < pPreviousNamespaceDecls.GetSize(); i++)
				{
					NamespaceDecl pPreviousNamespace = pPreviousNamespaceDecls.Get(i);
					NamespaceMerge(pPreviousNamespace);
				}
			}
		}

		public void Amalgamate(string sAmalgamateFileName)
		{
			// create public and secret translation unit...
			InternalString* sSecretFileName = own new InternalString(sAmalgamateFileName);
			sSecretFileName.Replace(".nll", "Secret.nll");
			TranslationUnit* pSecretTranslationUnit = own new TranslationUnit(sSecretFileName.GetExternalString());
			TranslationUnit* pPublicTranslationUnit = own new TranslationUnit(sAmalgamateFileName);

			while (m_pFirstChild != null)
			{
				AST* pAST;
				pAST = own RemoveChild(m_pFirstChild);

				TranslationUnit pTranslationUnit = cast TranslationUnit(pAST);
				bool bSkipOutput = pTranslationUnit.m_sInFile.EndsWith(".nll.def");

				// a bit hax as we will also be splitting the tokens into secret/public, but they will get merged back laterz
				while (pTranslationUnit.m_pTokenContainer.m_pTokenVector.GetSize() > 0)
				{
					Token* pToken = own pTranslationUnit.m_pTokenContainer.m_pTokenVector.PopFront();
					pToken.m_sFileName = pPublicTranslationUnit.m_sInFile;
					pPublicTranslationUnit.m_pTokenContainer.m_pTokenVector.PushBack(disown pToken);
				}

				if (pPublicTranslationUnit.m_pFirstChild == null)
				{
					pPublicTranslationUnit.m_pFirstChild = own disown pAST.m_pFirstChild;
					pPublicTranslationUnit.m_pLastChild = pPublicTranslationUnit.m_pFirstChild;
				}
				else
				{
					pPublicTranslationUnit.m_pLastChild.m_pNextSibling = own disown pAST.m_pFirstChild;
					pPublicTranslationUnit.m_pLastChild = pPublicTranslationUnit.m_pLastChild.m_pNextSibling; // incorrect but we fix in the while loop
				}

				while (true)
				{
					pPublicTranslationUnit.m_pLastChild.m_pParent = pPublicTranslationUnit;
					pPublicTranslationUnit.m_pLastChild.m_bSkipOutput = bSkipOutput;

					if (pPublicTranslationUnit.m_pLastChild.m_pNextSibling == null)
						break;

					pPublicTranslationUnit.m_pLastChild = pPublicTranslationUnit.m_pLastChild.m_pNextSibling;
				}
			}

			while (m_pTranslationUnitVector.GetSize() > 0)
			{
				m_pTranslationUnitVector.PopBack();
			}

			NamespaceMerge(pPublicTranslationUnit);

			// pop secret namespace out...
			RecurseNamespaces(pPublicTranslationUnit, null, pSecretTranslationUnit);

			m_pTranslationUnitVector.PushBack(pSecretTranslationUnit);
			AddChild(disown pSecretTranslationUnit);

			m_pTranslationUnitVector.PushBack(pPublicTranslationUnit);
			AddChild(disown pPublicTranslationUnit);
		}

		public void Output(AST::Language eLanguage, OutputFile eOutputFile)
		{
			InternalString* sOutFile = own new InternalString("");
			InternalString* sOut = own new InternalString("");

			//string sCombined = "";
			for (int i = 0; i < m_pTranslationUnitVector.GetSize(); i++)
			{
				TranslationUnit pTranslationUnit = m_pTranslationUnitVector.Get(i);
				sOutFile.Set(pTranslationUnit.m_sInFile.GetExternalString());

				if (sOutFile.EndsWith(".nll"))
				{
					TranslationUnit::ConvertFilePath(eLanguage, eOutputFile, sOutFile);
					
					string sxOutFile = sOutFile.GetExternalString();

					sOut.Set("");
					pTranslationUnit.Stringify(eLanguage, eOutputFile, 0, sOut);

					InternalString* sDirectory = own File::GetFileDirectory(sxOutFile);
					File::CreateDirectory(sDirectory.GetExternalString());


					InternalString* sTestFile = own File::GetContents(sxOutFile);
					if (sTestFile == null || !sOut.IsEqual(sTestFile.GetExternalString()))
					{
						File::PutContents(sxOutFile, sOut.GetExternalString());
					}

					//Console::Log(sxOutFile);
					//sCombined = sCombined + sOut;
				}
			}
		}
	}
}