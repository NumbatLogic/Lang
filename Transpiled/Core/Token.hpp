#pragma once

namespace NumbatLogic
{
	class InternalString;
	class Token;
}
namespace NumbatLogic
{
	class Token
	{
		public: enum Type
		{
			TOKEN_AND,
			TOKEN_ANGLE_BRACKET_LEFT,
			TOKEN_ANGLE_BRACKET_LEFT_EQUALS,
			TOKEN_ANGLE_BRACKET_RIGHT,
			TOKEN_ANGLE_BRACKET_RIGHT_EQUALS,
			TOKEN_BANG,
			TOKEN_BITWISE_AND,
			TOKEN_BITWISE_OR,
			TOKEN_CARET,
			TOKEN_CARRIGE_RETURN,
			TOKEN_CHAR,
			TOKEN_CHAR_UNTERMINATED,
			TOKEN_COLON,
			TOKEN_COMMA,
			TOKEN_CURLY_BRACE_LEFT,
			TOKEN_CURLY_BRACE_RIGHT,
			TOKEN_DIVIDE,
			TOKEN_DOT,
			TOKEN_DOUBLE_ANGLE_BRACKET_LEFT,
			TOKEN_DOUBLE_ANGLE_BRACKET_RIGHT,
			TOKEN_DOUBLE_COLON,
			TOKEN_DOUBLE_EQUALS,
			TOKEN_EQUALS,
			TOKEN_IDENTIFIER,
			TOKEN_KEYWORD_BASE,
			TOKEN_KEYWORD_BOOL,
			TOKEN_KEYWORD_BREAK,
			TOKEN_KEYWORD_CASE,
			TOKEN_KEYWORD_CAST,
			TOKEN_KEYWORD_CLASS,
			TOKEN_KEYWORD_CONST,
			TOKEN_KEYWORD_CONSTRUCT,
			TOKEN_KEYWORD_CONTINUE,
			TOKEN_KEYWORD_DEFAULT,
			TOKEN_KEYWORD_DELEGATE,
			TOKEN_KEYWORD_DELETE,
			TOKEN_KEYWORD_DESTRUCT,
			TOKEN_KEYWORD_DISOWN,
			TOKEN_KEYWORD_DOUBLE,
			TOKEN_KEYWORD_ELSE,
			TOKEN_KEYWORD_ENUM,
			TOKEN_KEYWORD_FALSE,
			TOKEN_KEYWORD_FLOAT,
			TOKEN_KEYWORD_FOR,
			TOKEN_KEYWORD_IF,
			TOKEN_KEYWORD_INT,
			TOKEN_KEYWORD_INT16,
			TOKEN_KEYWORD_INT32,
			TOKEN_KEYWORD_INT8,
			TOKEN_KEYWORD_NAMESPACE,
			TOKEN_KEYWORD_NEW,
			TOKEN_KEYWORD_NULL,
			TOKEN_KEYWORD_OVERRIDE,
			TOKEN_KEYWORD_OWN,
			TOKEN_KEYWORD_PRIVATE,
			TOKEN_KEYWORD_PUBLIC,
			TOKEN_KEYWORD_RETURN,
			TOKEN_KEYWORD_REF,
			TOKEN_KEYWORD_STATIC,
			TOKEN_KEYWORD_STRING,
			TOKEN_KEYWORD_SWITCH,
			TOKEN_KEYWORD_THIS,
			TOKEN_KEYWORD_TRUE,
			TOKEN_KEYWORD_UINT,
			TOKEN_KEYWORD_UINT16,
			TOKEN_KEYWORD_UINT32,
			TOKEN_KEYWORD_UINT64,
			TOKEN_KEYWORD_UINT8,
			TOKEN_KEYWORD_UNICHAR,
			TOKEN_KEYWORD_USING,
			TOKEN_KEYWORD_VIRTUAL,
			TOKEN_KEYWORD_VOID,
			TOKEN_KEYWORD_VOIDPTR,
			TOKEN_KEYWORD_WHILE,
			TOKEN_MINUS,
			TOKEN_MINUS_EQUALS,
			TOKEN_MINUS_MINUS,
			TOKEN_MODULUS,
			TOKEN_NEW_LINE,
			TOKEN_NOT_EQUALS,
			TOKEN_NUMBER,
			TOKEN_OR,
			TOKEN_PARENTHESIS_LEFT,
			TOKEN_PARENTHESIS_RIGHT,
			TOKEN_PLUS,
			TOKEN_PLUS_EQUALS,
			TOKEN_PLUS_PLUS,
			TOKEN_QUESTION_MARK,
			TOKEN_SEMICOLON,
			TOKEN_SPACE,
			TOKEN_SQUARE_BRACKET_LEFT,
			TOKEN_SQUARE_BRACKET_RIGHT,
			TOKEN_STAR,
			TOKEN_STAR_DOUBLE,
			TOKEN_STRING,
			TOKEN_STRING_UNTERMINATED,
			TOKEN_TAB,
			TOKEN_TILDE,
		};

		public: Type m_eType;
		public: InternalString* m_sFileName;
		public: int m_nLine;
		public: int m_nColumn;
		public: InternalString* m_sValue;
		public: void Stringify(InternalString* sOut);
		public: const char* GetString();
		public: Token* Clone();
		public: Token();
		public: virtual ~Token();
	};
}

